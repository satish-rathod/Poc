import { AudioExtension } from 'agora-rte-extension';
import { AudioProcessor } from 'agora-rte-extension';
import type { IAudioProcessorContext } from 'agora-rte-extension';

/**
 * The forward vector of remote voice, (x, y, z)
 * @beta
 */
export declare type forward = [number, number, number];

/**
 * The low level position information of remote user relative to listener in spherical coordinate system
 * @beta
 */
export declare interface LowLevelSpatialParams {
    azimuth: number;
    elevation: number;
    distance: number;
    orientation: number;
    attenuation: number;
}

/**
 * The coordinate of remote voice source, (x, y, z)
 * @beta
 */
export declare type position = [number, number, number];

/**
 * The high level position information of remote user in Cartesian coordinate system
 * @beta
 */
export declare interface RemoteVoicePositionInfo {
    position: position;
    forward: forward;
}

/**
 * The right vector of remote voice, (x, y, z)
 * @beta
 */
export declare type right = [number, number, number];

/**
 * @beta
 */
export declare enum SpatialAudioErrorCode {
    SUCCESS = "success",
    EXTENSION_NOT_REG = "extension not registered",
    PROCESSOR_NOT_CREATE = "processor not created",
    PROCESSOR_NOT_ENABLED = "processor not enabled",
    INVALID_PARMS = "invalid Parameters",
    UNKNOWN_ERROR = "unknown error"
}

/**
 * @beta
 */
export declare class SpatialAudioExtension extends AudioExtension<SpatialAudioProcessor> {
    BUILD: string;
    VERSION: string;
    name: string;
    constructor(option?: SpatialAudioExtensionOptions);
    protected _createProcessor(): SpatialAudioProcessor;
    /**
     *
     * @param position - The coordinates in the world coordinate system. This parameter is an array of length 3, and the three values ​​represent the front, right, and top coordinate values ​​in turn.
     * @param forward - The unit vector of the front axis of the world coordinate system. This parameter is an array of length 3, and the three values ​​represent the front, right, and top coordinate values ​​in turn.
     * @param right - The unit vector on the right axis of the world coordinate system. This parameter is an array of length 3, and the three values ​​represent the front, right, and top coordinate values ​​in turn.
     * @param up - The unit vector of the up axis in the world coordinate system. This parameter is an array of length 3, and the three values ​​represent the front, right, and top coordinate values ​​in turn.
     * @returns
     */
    updateSelfPosition(position: position, forward: forward, right: right, up: up): SpatialAudioErrorCode;
    /**
     *
     * @returns
     */
    clearRemotePositions(): SpatialAudioErrorCode;
    /**
     *
     * @param unit - The unit of distance
     * @returns
     */
    setDistanceUnit(unit: number): SpatialAudioErrorCode;
    /**
     *
     * @param set - The set of audio zones
     * @returns
     */
    setZones(set: ZoneSet): SpatialAudioErrorCode;
    static checkCompatibility(): boolean;
}

/**
 * Parameters of spatial audio extension
 * @beta
 */
export declare interface SpatialAudioExtensionOptions {
    /**
     * The deploy path of wasm and JS files provided in 'node_modules/agora-extension-spatial-audio/external/' directory.
     */
    assetsPath: string;
}

/**
 * @beta
 */
export declare class SpatialAudioProcessor extends AudioProcessor {
    name: string;
    private processed_track;
    private disable_by_remove_or_clear_position;
    private stats;
    private attenuation_force_set;
    private source_attenuation_factor;
    private position_info;
    constructor();
    get id(): string;
    /**
     *
     * @param params - converted low-level spatial params
     */
    updateLowLevelSpatialParams(params: LowLevelSpatialParams): void;
    /**
     *
     * @param azimuth - The azimuth (degree) of the speaker relative to the listener, valid range is [0, 360], default value is 0
     * @returns
     */
    updateSpatialAzimuth(azimuth?: number): SpatialAudioErrorCode;
    /**
     *
     * @param elevation - The elevation (degree) of the speaker relative to the listener, valid range is [-90, 90], default value is 0
     * @returns
     */
    updateSpatialElevation(elevation?: number): SpatialAudioErrorCode;
    /**
     *
     * @param orientation - The head facing (degree) of the speaker relative to the listener, valid range is [0, 180], default value is 180
     * @returns
     */
    updateSpatialOrientation(orientation?: number): SpatialAudioErrorCode;
    /**
     *
     * @param distance - The distance (meter) of the speaker relative to the listener, valid range is [1, 50], default value is 1
     * @returns
     */
    updateSpatialDistance(distance?: number): SpatialAudioErrorCode;
    /**
     *
     * @param enable - toggle of the air absorb
     * @returns
     */
    updateSpatialAirAbsorb(enable: boolean): void;
    /**
     *
     * @param factor - The attenuation factor, valid range is [0, 1], default value is 0.5
     * @param forceSet - When set to true, use parameter passed in as attenuation factor, otherwise use attenuation factors of audio zone set
     * @returns
     */
    updateSpatialAttenuation(factor?: number, forceSet?: boolean): SpatialAudioErrorCode;
    /**
     *
     * @param enable - toggle of the blurred vocals
     * @returns
     */
    updateSpatialBlur(enable: boolean): void;
    /**
     *
     * @param info - The position and forward vector of local player
     * @returns
     */
    updatePlayerPositionInfo(info: RemoteVoicePositionInfo): SpatialAudioErrorCode;
    /**
     *
     * @param info - The position and forward vector of remote user
     * @returns
     */
    updateRemotePosition(info: RemoteVoicePositionInfo): SpatialAudioErrorCode;
    /**
     *
     * @returns
     */
    removeRemotePosition(): SpatialAudioErrorCode;
    /**
     * will be called when RemoteAudioTrack was connected to the pipeline
     * @param context - IAudioProcessorContext in agora-rte-extension
     */
    protected onPiped(context: IAudioProcessorContext): void;
    /**
     * will be called when RemoteAudioTrack was disconnected from the pipeline,
     * or the current/previous processor was disconnected from the pipeline.
     * @param context - IAudioProcessorContext in agora-rte-extension
     */
    protected onUnpiped(context?: IAudioProcessorContext): void;
    /**
     * will be called when previous processor generate output MediaStreamTrack
     * @param track - original media track
     * @param context - IAudioProcessorContext in agora-rte-extension
     */
    protected onTrack(track: MediaStreamTrack, context: IAudioProcessorContext): Promise<void>;
    /**
     * will be called when previous processor generate output AudioNode
     * @param node - AudioNode in WebAudio APIs
     * @param context - IAudioProcessorContext in agora-rte-extension
     */
    protected onNode(node: AudioNode, context: IAudioProcessorContext): void;
    /**
     * will be called when enable/disable methods on Processor was called
     * @param enabled - toggle of processor
     */
    protected onEnableChange(enabled: boolean): void;
    /**
     *
     * @param track - original media track
     * @param id - id of processor
     * @returns
     */
    private process;
}

/**
 * The up vector of remote voice, (x, y, z)
 * @beta
 */
export declare type up = [number, number, number];

/**
 * Audio zone parameters
 * @beta
 */
export declare interface ZoneParams {
    id: number;
    position: position;
    forward: forward;
    right: right;
    up: up;
    forwardLength: number;
    rightLength: number;
    upLength: number;
    attenuation: number;
}

/**
 * The set of audio zones
 * @beta
 */
export declare type ZoneSet = Array<ZoneParams>;

export { }
