import { AudioExtension } from 'agora-rte-extension';
import { AudioProcessor } from 'agora-rte-extension';
import type { IAudioProcessorContext } from 'agora-rte-extension';

export declare type forward = [number, number, number];

export declare interface LowLevelSpatialParams {
    azimuth: number;
    elevation: number;
    distance: number;
    orientation: number;
    attenuation: number;
}

export declare type position = [number, number, number];

export declare interface RemoteVoicePositionInfo {
    position: position;
    forward: forward;
}

export declare type right = [number, number, number];

export declare enum SpatialAudioErrorCode {
    SUCCESS = "success",
    EXTENSION_NOT_REG = "extension not registered",
    PROCESSOR_NOT_CREATE = "processor not created",
    PROCESSOR_NOT_ENABLED = "processor not enabled",
    INVALID_PARMS = "invalid Parameters",
    UNKNOWN_ERROR = "unknown error"
}

export declare class SpatialAudioExtension extends AudioExtension<SpatialAudioProcessor> {
    BUILD: string;
    VERSION: string;
    name: string;
    constructor(option?: SpatialAudioExtensionOptions);
    protected _createProcessor(): SpatialAudioProcessor;
    updateSelfPosition(position: position, forward: forward, right: right, up: up): SpatialAudioErrorCode;
    clearRemotePositions(): SpatialAudioErrorCode;
    setDistanceUnit(unit: number): SpatialAudioErrorCode;
    setZones(set: ZoneSet): SpatialAudioErrorCode;
    static checkCompatibility(): boolean;
}

export declare interface SpatialAudioExtensionOptions {
    assetsPath: string;
}

export declare class SpatialAudioProcessor extends AudioProcessor {
    name: string;
    private processed_track;
    private disable_by_remove_or_clear_position;
    private stats;
    private attenuation_force_set;
    private source_attenuation_factor;
    private position_info;
    constructor();
    get id(): string;
    updateLowLevelSpatialParams(params: LowLevelSpatialParams): void;
    updateSpatialAzimuth(azimuth?: number): SpatialAudioErrorCode;
    updateSpatialElevation(elevation?: number): SpatialAudioErrorCode;
    updateSpatialOrientation(orientation?: number): SpatialAudioErrorCode;
    updateSpatialDistance(distance?: number): SpatialAudioErrorCode;
    updateSpatialAirAbsorb(enable: boolean): void;
    updateSpatialAttenuation(factor?: number, forceSet?: boolean): SpatialAudioErrorCode;
    updateSpatialBlur(enable: boolean): void;
    updatePlayerPositionInfo(info: RemoteVoicePositionInfo): SpatialAudioErrorCode;
    updateRemotePosition(info: RemoteVoicePositionInfo): SpatialAudioErrorCode;
    removeRemotePosition(): SpatialAudioErrorCode;
    protected onPiped(context: IAudioProcessorContext): void;
    protected onUnpiped(context?: IAudioProcessorContext): void;
    protected onTrack(track: MediaStreamTrack, context: IAudioProcessorContext): Promise<void>;
    protected onNode(node: AudioNode, context: IAudioProcessorContext): void;
    protected onEnableChange(enabled: boolean): void;
    private process;
}

export declare type up = [number, number, number];

export declare interface ZoneParams {
    id: number;
    position: position;
    forward: forward;
    right: right;
    up: up;
    forwardLength: number;
    rightLength: number;
    upLength: number;
    attenuation: number;
}

export declare type ZoneSet = Array<ZoneParams>;

export { }
